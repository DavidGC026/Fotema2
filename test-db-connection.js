const mysql = require('mysql2/promise');

const dbConfig = {
  host: process.env.EXPO_PUBLIC_DB_HOST || 'srv449.hstgr.io',
  user: process.env.EXPO_PUBLIC_DB_USER || 'u437141408_fotema',
  password: process.env.EXPO_PUBLIC_DB_PASSWORD || '@Aguila01126',
  database: process.env.EXPO_PUBLIC_DB_NAME || 'u437141408_fotema',
  port: parseInt(process.env.EXPO_PUBLIC_DB_PORT || '3306'),
  ssl: process.env.EXPO_PUBLIC_DB_SSL === 'true' ? {
    rejectUnauthorized: false
  } : false,
  connectTimeout: 60000,
};

async function testConnection() {
  console.log('üîç Iniciando diagn√≥stico de conexi√≥n a la base de datos...\n');
  
  // Mostrar configuraci√≥n
  console.log('üîß Configuraci√≥n actual:');
  console.log(`  - Host: ${dbConfig.host}`);
  console.log(`  - Usuario: ${dbConfig.user}`);
  console.log(`  - Base de datos: ${dbConfig.database}`);
  console.log(`  - Puerto: ${dbConfig.port}`);
  console.log(`  - SSL: ${dbConfig.ssl ? 'Habilitado' : 'Deshabilitado'}`);
  console.log(`  - Timeout: ${dbConfig.connectTimeout}ms\n`);
  
  let connection = null;
  
  try {
    console.log('üîå Intentando conectar...');
    connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ Conexi√≥n establecida exitosamente\n');
    
    // Test b√°sico
    console.log('üß™ Ejecutando pruebas...');
    const [basicResult] = await connection.execute('SELECT 1 as test, NOW() as timestamp, VERSION() as version');
    console.log('‚úÖ Consulta b√°sica exitosa');
    console.log(`   - Versi√≥n MySQL: ${basicResult[0].version}`);
    console.log(`   - Timestamp: ${basicResult[0].timestamp}\n`);
    
    // Verificar base de datos
    const [dbResult] = await connection.execute('SELECT DATABASE() as current_db');
    console.log(`‚úÖ Base de datos actual: ${dbResult[0].current_db}\n`);
    
    // Listar tablas
    const [tables] = await connection.execute('SHOW TABLES');
    console.log(`üìã Tablas encontradas: ${tables.length}`);
    if (tables.length > 0) {
      console.log('   Tablas:');
      tables.forEach((table, index) => {
        const tableName = Object.values(table)[0];
        console.log(`   ${index + 1}. ${tableName}`);
      });
    }
    console.log();
    
    // Test de tabla users
    try {
      const [userCount] = await connection.execute('SELECT COUNT(*) as count FROM users');
      console.log(`üë• Registros en tabla users: ${userCount[0].count}`);
    } catch (tableError) {
      console.log('‚ö†Ô∏è No se pudo acceder a la tabla users (puede no existir a√∫n)');
    }
    
    console.log('\nüéâ Diagn√≥stico completado exitosamente');
    
  } catch (error) {
    console.error('\n‚ùå ERROR DE CONEXI√ìN DETECTADO:\n');
    
    // Informaci√≥n del error
    if (error.code) {
      console.error(`üî¥ C√≥digo de error: ${error.code}`);
    }
    
    if (error.message) {
      console.error(`üìù Mensaje: ${error.message}`);
    }
    
    if (error.sqlMessage) {
      console.error(`üóÑÔ∏è SQL Error: ${error.sqlMessage}`);
    }
    
    // Diagn√≥stico espec√≠fico por tipo de error
    console.error('\nüîç DIAGN√ìSTICO DEL ERROR:');
    
    switch (error.code) {
      case 'ENOTFOUND':
        console.error('   ‚Üí El host de la base de datos no se pudo resolver');
        console.error('   ‚Üí Verifica que el host sea correcto y est√© accesible');
        break;
        
      case 'ECONNREFUSED':
        console.error('   ‚Üí La conexi√≥n fue rechazada');
        console.error('   ‚Üí Verifica que el puerto sea correcto y el servidor est√© ejecut√°ndose');
        break;
        
      case 'ER_ACCESS_DENIED_ERROR':
        console.error('   ‚Üí Acceso denegado');
        console.error('   ‚Üí Verifica el usuario y contrase√±a');
        break;
        
      case 'ER_BAD_DB_ERROR':
        console.error('   ‚Üí Base de datos no encontrada');
        console.error('   ‚Üí Verifica que el nombre de la base de datos sea correcto');
        break;
        
      case 'ETIMEDOUT':
        console.error('   ‚Üí Timeout de conexi√≥n');
        console.error('   ‚Üí El servidor puede estar sobrecargado o la red es lenta');
        break;
        
      case 'ECONNRESET':
        console.error('   ‚Üí Conexi√≥n reiniciada por el servidor');
        console.error('   ‚Üí Puede ser un problema de configuraci√≥n SSL o firewall');
        break;
        
      default:
        console.error('   ‚Üí Error no reconocido, revisa los logs para m√°s detalles');
    }
    
    console.error('\nüí° POSIBLES SOLUCIONES:');
    console.error('   1. Verifica las credenciales de la base de datos');
    console.error('   2. Confirma que el servidor MySQL est√© ejecut√°ndose');
    console.error('   3. Revisa la configuraci√≥n de firewall');
    console.error('   4. Verifica la configuraci√≥n SSL si es necesaria');
    console.error('   5. Confirma que la base de datos existe');
    
    if (error.stack) {
      console.error('\nüìö Stack trace completo:');
      console.error(error.stack);
    }
    
  } finally {
    if (connection) {
      try {
        await connection.end();
        console.log('\nüîí Conexi√≥n cerrada correctamente');
      } catch (closeError) {
        console.error('‚ö†Ô∏è Error al cerrar la conexi√≥n:', closeError.message);
      }
    }
  }
}

// Ejecutar el test
testConnection().catch(console.error);
